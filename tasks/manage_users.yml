---
###############################################################################
# Manage MagicMirror Users
###############################################################################
# Check if user exists and create if enabled.
#
# Args:
#   mirror_user: string mirror username.
#   mirror_group: string mirror group.
#   mirror_create_user: boolean true to create role default user.
#   mirror_default_user: dict containing builitin.user options for mirror.
#   mirror_default_group: dict containing builitin.group options for mirror.

- name: 'manage users | confirm user exists'
  ansible.builtin.command: 'id {{ mirror_user }}'
  register: _mirror_user_exists
  changed_when: _mirror_user_exists.rc > 0
  failed_when: false

- name: 'manage users | confirm group exists'
  ansible.builtin.command: 'groups {{ mirror_group }}'
  register: _mirror_group_exists
  changed_when: _mirror_group_exists.rc > 0
  failed_when: false

- name: 'manage users | create mirror group'
  ansible.builtin.group:
    name:  '{{ mirror_default_group.name }}'
    gid:   '{{ mirror_default_group.gid }}'
    state: 'present'
  when: mirror_create_user and _mirror_group_exists.rc != 0

- name: 'manage users | create mirror user (logins disabled)'
  ansible.builtin.user:
    name:            '{{ mirror_default_user.name }}'
    group:           '{{ mirror_default_user.group }}'
    uid:             '{{ mirror_default_user.uid }}'
    shell:           '{{ mirror_default_user.shell }}'
    home:            '{{ mirror_default_user.home }}'
    comment:         '{{ mirror_default_user.comment }}'
    create_home:     '{{ mirror_default_user.create_home }}'
    password:        '{{ mirror_default_user.password }}'
    password_lock:   '{{ mirror_default_user.password_lock }}'
    update_password: '{{ mirror_default_user.update_password }}'
    expires:         '{{ mirror_default_user.expires }}'
    system:          '{{ mirror_default_user.system }}'
    state:           'present'
  when: mirror_create_user and _mirror_user_exists.rc != 0
